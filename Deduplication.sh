#!/bin/sh

#PBS -l mem=16gb,nodes=1:ppn=1,walltime=36:00:00 
#PBS -m abe 
#PBS -M user@example.com
#PBS -q lab

set -e
set -u
set -o pipefail

module load parallel

#   This script is a QSub submission script for converting a batch of SAM files to sorted and deduplicated BAM files
#   To use, on line 5, change the 'user@example.com' to your own email address
#       to get notificaitons on start and completion of this script
#   Add the full file path to list of samples on the 'SAMPLE_INFO' field on line 51
#       This should look like:
#           SAMPLE_INFO=${HOME}/Directory/list.txt
#       Use ${HOME}, as it is a link that the shell understands as your home directory
#           and the rest is the full path to the actual list of samples
#   Define a path to a reference genome on line 54
#       This should look like:
   #        REF_GEN=${HOME}/Directory/reference_genome.fa
#   Put the full directory path for the output in the 'SCRATCH' field on line 57
#       This should look like:
#           SCRATCH="${HOME}/Out_Directory"
#       Adjust for your own out directory.
#   Name the project in the 'PROJECT' field on line 60
#       This should look lke:
#           PROJECT=Genetics
#   Define a path to the SAMTools in the 'SAMTOOLS' field on line 64
#       If using MSI, leave the definition as is to use their installation of SAMTools
#       Otherwise, it should look like this:
#           SAMTOOLS=${HOME}/software/samtools
#       Please be sure to comment out (put a '#' symbol in front of) the 'module load samtools' on line 63
#       And to uncomment (remove the '#' symbol) from the 'SAMTOOLS=' on line 64
#   Define paths to the Picard utilites: SortSam, AddOrReplaceReadGroups, and MarkDuplicates on lines
#       If using MSI, leave the definitions as is to use their installaitons
#       Otherwise, it should look like this, using SortSam as an example:
#           PICARD_SORT="${HOME}/directory/picard/dist/picard.jar SortSam"
#       Please note, the double quotation marks are necessary for this definition to work
#       Plese be sure to comment out lines 68 through 70, 72, and 74
#       And to uncoment lines 71, 73, and 75
#   Set the sequencing platform on line 78
#       This should look like:
#           PLATFORM=Illumina
#       This is set to Illumina by default, please see Picard's documentaiton for more details

#   List of SAM files for conversion
SAMPLE_INFO=

#   Reference genome to help base the conversion off of
REF_GEN=

#   Scratch directory, for output
SCRATCH=

#   Name of project
PROJECT=

#	Load the SAMTools module for MSI, else define path to SAMTools installation
module load samtools
#SAMTOOLS=

#   Load the Picard Tools module for MSI, else define path to the
#       SortSam, AddOrReplaceReadGroups, and MarkDuplicates utilities
module load picard
PICARD_DIR=`echo $PTOOL | rev | cut -d " " -f 1 - | rev`
PICARD_SORT="${PICARD_DIR}/picard.jar SortSam"
#PICARD_SORT=
ADDRG="${PICARD_DIR}/picard.jar AddOrReplaceReadGroups"
#ADDRG=
MARKDUPS="${PICARD_DIR}/picard.jar MarkDuplicates"
#MARKDUPS=

#   Sequencing platform
PLATFORM=Illumina

#   Change to the scratch directory
cd ${SCRATCH}

#   Make sure that java is installed
if `command -v java > /dev/null 2> /dev/null`
then
    echo "Java is installed"
else
    echo "Please install Java and add to your PATH"
    exit 1
fi

#   Make the outdirectories
OUTDIR=${SCRATCH}/${PROJECT}
mkdir -p ${OUTDIR}/stats ${OUTDIR}/deduped ${OUTDIR}/sorted ${OUTDIR}/finished ${OUTDIR}/raw

#   Define a function to process SAM files generated by BWA mem
#       This function will generate sorted and deduplicated BAM files
#       as well as alignment statistics for raw and finished BAM files
dedup() {
    #   Today's date
    YMD=`date +%Y-%m-%d`
    #   File we're working with
    SAMFILE="$1"
    #   Sample name, taken from full name of SAM file
    SAMPLE_NAME=`basename "${SAMFILE}" .sam`
    #	Use Samtools to trim out the reads we don't care about
    #	-f 3 gives us reads mapped in proper pair
    #	-F 256 excludes reads not in their primary alignments
    samtools view -f 3 -F 256 -bT "${REF_GEN}" "${SAMFILE}" > "${OUTDIR}"/raw/"${SAMPLE_NAME}"_"${YMD}"_raw.bam
    "${/.sam/_trimmed.bam}"
    #   Create alignment statistics for raw BAM files
    samtools flagstat "${OUTDIR}"/raw/"${SAMPLE_NAME}"_"${YMD}"_raw.bam > "${OUTDIR}"/stats/"${SAMPLE_NAME}"_"${YMD}"_raw_stats.out
    #	Picard tools to sort and index
    java -Xmx15g -XX:MaxPermSize=10g -jar\
        "${PICARD_SORT}" \
        INPUT="${OUTDIR}"/raw/"${SAMPLE_NAME}"_"${YMD}"_raw.bam \
        OUTPUT="${OUTDIR}"/sorted/"${SAMPLE_NAME}"_"${YMD}"_sorted.bam \
        SORT_ORDER=coordinate \
        CREATE_INDEX=true\
        TMP_DIR="${HOME}"/Scratch/Picard_Tmp
    #	Then remove duplicates
    java -Xmx15g -XX:MaxPermSize=10g -jar\
        "${MARKDUPS}" \
        INPUT="${OUTDIR}"/sorted/"${SAMPLE_NAME}"_"${YMD}"_sorted.bam \
        OUTPUT="${OUTDIR}"/deduped/"${SAMPLE_NAME}"_"${YMD}"_deduplicated.bam \
        METRICS_FILE="${OUTDIR}"/deduped/"${SAMPLE_NAME}"_"${YMD}"_Metrics.txt\
        REMOVE_DUPLICATES=true\
        CREATE_INDEX=true\
        TMP_DIR="${HOME}"/Scratch/Picard_Tmp\
        MAX_RECORDS_IN_RAM=50000
    #   Then add read groups
    java -Xmx15g -XX:MaxPermSize=10g -jar\
        "${ADDRG}" \
        INPUT="${OUTDIR}"/deduped/"${SAMPLE_NAME}"_"${YMD}"_deduplicated.bam \
        OUTPUT="${OUTDIR}"/finished/"${SAMPLE_NAME}"_"${YMD}"_finished.bam \
        RGID="${SAMPLE_NAME}"\
        RGPL="${PLATFORM}"\
        RGPU="${SAMPLE_NAME}"\
        RGSM="${SAMPLE_NAME}"\
        RGLB="${PROJECT}"_"${SAMPLE_NAME}"\
        TMP_DIR="${HOME}"/Scratch/Picard_Tmp\
        CREATE_INDEX=True
    #   Create alignment statistics for finished BAM files
    samtools flagstat "${OUTDIR}"/finished/"${SAMPLE_NAME}"_"${YMD}"_finished.bam > "${OUTDIR}"/stats/"${SAMPLE_NAME}"_"${YMD}"_finished_stats.out
}

#   Export the function to be used by GNU parallel
export -f dedup

#   Run the function in parallel
parallel dedup {} :::: $SAMPLE_INFO

#   Create a list of finished BAM files
find ${OUTDIR}/finished -name "*_finished.bam" | sort > ${OUTDIR}/${PROJECT}_finished_BAM_files.txt
echo "List of BAM files can be found at"
echo "${OUTDIR}/${PROJECT}_finished_BAM_files.txt"
